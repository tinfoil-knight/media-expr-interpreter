ExpressionLanguage {
  Program = Exp
  Exp     = LogicOr
  LogicOr = LogicAnd ("or" LogicAnd)*
  LogicAnd = Equality ( "and" Equality )*
  Equality = Comparison ( ( "!=" | "==" ) Comparison )*
  Comparison = Term ( ( ">" | ">=" | "<" | "<=" ) Term )*
  Term = Factor ( ( "-" | "+" ) Factor )*
  Factor = Exponent ( ( "/" | "*" | "%" ) Exponent )*
  Exponent = Unary ( "^" Unary )*

  // Unary = ( "!" | "-" ) Unary --unary
  //        | Literal
  Unary = Literal

  
  Literal = "(" Exp ")"  --parens
          | bool
          | number
          | id
  bool = "true" | "false"
  id      = letter alnum*
  number  = digit+

}

/* 

MediaExpr {
	// Syntax Grammar (should start with Uppercase, ignores whitespace)
	// Note: Math follows PEMDAS

	//transformation = type (("-" Expression)*)?
	//type = letter*

	Expression = ValueExpr | IfExpr
	IfExpr = "if" "(" Expression ")" "then" ValueExpr "else" ValueExpr

	ValueExpr = LogicOr
	LogicOr = LogicAnd ( "or" LogicAnd )*
	LogicAnd = Equality ( "and" Equality )*
	Equality = Comparison ( ( "!=" | "==" ) Comparison )*
	Comparison = Term ( ( ">" | ">=" | "<" | "<=" ) Term )*
	Term = Factor ( ( "-" | "+" ) Factor )*
	Factor = Exponent ( ( "/" | "*" | "%" ) Exponent )*
  Exponent = Unary ( "^" Unary )*

	Unary = ( "!" | "-" ) Unary --unary
			| Literal

	Literal = numeric
			| identifier
			| "(" Expression ")" --expr

	// Lexical Grammar (should start with lowercase)

	numeric =  numberWithUnit | number

	numberWithUnit = number unit
	unit = dimensionUnit | timeUnit
	dimensionUnit = "cm" | "mm" | "px"
	timeUnit = "s" | "ms" | "min" | "hr"

	number = float | whole 
	float = digit* "." digit+
	whole = digit+

	identifier = letter alnum*
}

*/